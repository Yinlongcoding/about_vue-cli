#### vue-router, axios, vuex

题记：
为何我要选择将这三者放在一起来说？首先分开来写，必然是会漏掉一些必要的点。其次，在整个项目中router并不会用到，但是为了总体的知识架构还是来熟悉一下，毕竟没有人看一遍文档不动手就知道怎么coding，古人言：‘纸上得来终觉浅，绝知此事要躬行’。

[vue-router](https://router.vuejs.org/zh-cn) & [axios](https://www.npmjs.com/package/axios)
  - 所谓的前后端分离的表现形式是什么？渐渐了解后发现核心就是路由
  - 理一下思路：
    + App.vue 为父组件我们所写的路有必然是存在其内部
    + vue-router
      - 创建好路由的路径, 引导路由组件正确渲染
      - 目前有 home 和 about 两个组件
      - ```<router-link to="/path">value</router-link> 和1.x有所区别```
      - 在Home组件中，使用axios的来请求JSON数据
      - ```<router-view></router-view> 路由出口，路由到的组件会渲染到这里！```
      - 思路理顺了！开始
``` 
// App.vue
  <template>
  <div id="app">
    <h1>hello vue!</h1>
    <div class="nav">
      <ul>
        <li><router-link to="/home">Home</router-link></li>
        <li><router-link to="/about">Abuout</router-link></li>  
      </ul>
    </div>
    <div class="main">
      <router-view></router-view>     
    </div>
  </div>
</template>
<script> 
import home from './components/Home.vue'
import about from './components/About.vue'

export default {
  name: 'app',
  components: {
    home,
    about
  }  
}
</script>
<style> </style>
```

```npm i vue-router --save-dev  //下载

// main.js
    import VueRouter from 'vue-router' 
    impott axios from 'axios'  // ajax 请求依赖
    Vue.use(VueRouter)
    Vue.prototype.$http = axios   
    // axios 并不能使用vue.use()所以在vue的原型链上添加这个方法，这样每个组件都可以无障碍使用，可能会造成一些‘污染’，但显然利大于弊。

    const router = new VueRouter({  // 创建一个vue-router 的实例 
      routes: [                     // 2.x版本的vue-router的routes变更为数组对象  
        {path: '/home', component: Home},  
        {path: '/about', component: About},
        {path: '*', redirect: '/home'}  // router 重定向， 
      ]                    
    })

    new Vue({
      el: '#app',
      router,
      render: h=> h(App)   // vue 钩子 render函数，也是一个挂载实例的方法
    })
```
那么接下来就是写Home.vue & About.vue
```
 // Home.vue
<template>
  <div class="home">
    <h1>{{ msg }}</h1>
    <ul>
      <li v-for="word in words">
        {{ word.headword }}
      </li>
    </ul>
  </div>
</template>
<script>
export default {
  name: 'home',
  data () {
    return {
      msg: '单词列表',
      words: '',
    }
  },
  created: function () {
    var self = this   
    // 在axios中this的指向axios的promess对象，所以需要一个指向vue实例的指针
    this.$http.get('http://damiao.io:5000/word/head')   
        .then(function(res){
          self.words = res.data 
        })
        .catch(error=>console.log(error))
  }
}
</script>
<style></style>
```
```
About.vue
<template>
  <div class="about">
    <ul>
      <li v-for="list in lists"> {{ list.name }}</li>
    </ul>
  </div>
</template>

<script>

export default {
  name: 'about',
  data () {
    return {
      msg: 'About',
      lists: [
        {name: '发音' },
        {name: '音标' },
        {name: '释义' },
        {name: '例句' } 
      ]
    }
  }
}
</script>
```
父组件向子组件传值利用```props```,反过来则需要用到 $on,$emit 之类的监听与执行

#### 单独拿出来的vuex
* 什么是vuex？
  - 我的理解就是前端的数据库，可以让你在任意组件内获取数据库信息
* 为什么要用？
  - 在axios获取到json 数据的时候，不仅头大，数组类对象需要深层便利才能拿到想要的值，如果暴力的用 v-for 也是可以的，显然这将失去模块化的意义，同时代码的耦合度也会提升，显然不是我想要的。
  - vuex 可以将我获取到的信息储存起来，放在vue的vuex实例里，同时封装了多个方法，方便平行组件之间的信息传输，单纯的数据流通远比操作dom来的要优雅很多
* 具体体现
  - 查询单词获取数据，储存与 vuex.store.state对象中
  - vuex.mutations 封装大部分数据交互的方法，自给自足的提供接口。
  - 使用接口，将需要的数据展现在view层中。
