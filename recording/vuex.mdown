## Vuex
题记：在填这个坑的时候。痛苦，是唯一的回忆。爽，是最后的结果。
* WHAT [vuex](https://vuex.vuejs.org/zh-cn/)？
    - 思想继承自[React](https://facebook.github.io/react/)-[Redux](http://redux.js.org/)
    - 前面提到过`vue-router`为组件提供了因果，但这只是父与子的联系
    - vuex可以为平行组件之间的数据交互提供一条便捷的道路
* WHY vuex？
  - 广泛性：状态管理器，所有的数据和方法全部放在vuex的对象里，所有组件皆可调用
  - 代码解耦：HTML和JavaScript低耦合，提升性能  
  - 面向对象：储存数据，封装方法，提供接口，多态方法，外部调用
* HOW vuex?
  - 数据层次过深，可在Store内做预处理
  - mutations 封装大部分数据交互的方法，自给自足的提供接口
  - actions 异步提交mutations，交互变的轻而易举
  - getters 获取数据状态摆脱暴力 `v-for * n`
  - 使用接口，将需要的数据展现在view层中
* 多说无益，手下见真章.

本次采取一个由浅入深的方式来学习，从一个简单的例子开始吧！(本例来源:vuex文档 [Counters](https://vuex.vuejs.org/zh-cn/getting-started.html))  
下载：`npm install vuex`，接下来，一张关系图，描述vuex这个对象。
![img](../images/vuex.png)
* 多个视图依赖于同一状态
* -来自不同视图的行为需要变更同一状态”  
![img](../images/counter.gif)  

`src`目录下`vuex`文件夹下`store.js`
store.js
```
import Vue form 'vue'
improt Vuex from 'vuex'

Vue.use(Vuex)

const state = {    
    count: 0
}

const mutations = {
    increment (state) {
     state.count++ 
    },
    decrement (state) {
     state.count-- 
    }
}

const actions = {
    increment: ({commit}) => commit('increment'),
    decrement: ({commit}) => commit('decrement'),
    incrementIfOdd ({commit, state}) {
        if((state.count + 1) % 2 === 0) {
            commit('increment')
        }
    },
    incrementIfAsync ({commit}) {
        if((state.count + 1) % 2) {
            commit('increment')
        }   
    }
}

const getter = {
    evenOrOdd: state => state.count % 2 === 0 ? 'even' : 'odd'
}

export default new Vuex.Store({
    state,
    getters,
    actions,
    mutations
})
```
* 代码中不难看出，Store就是那颗状态管理树，它包含了
    - 数据库 [state]
        + 所有的数据以及数据状态都讲存放在这里，所有的组件都可访问到数据
    - 变更方案 [mutations]
        + mutaitons 和事件极其类似，但是它`必须是同步函数`
        + [vue‘s devtools](https://github.com/vuejs/vue-devtools) 在mutations 触发时都会记录变化前后的状态，存在回调函数的时候，devtools并不知道回调函数是否执行，这给纪录状态带来不必要的麻烦
    - 执行方案 [actions]
        + 所有的异步执行事件全部放在actions里，就避免devtools懵逼的情况
        + 在actions里，需要显式的去`commit`一次mutaitions
    - 获取状态 [getters]
        + 数据可以保存，当谈也是可以获取的
        + getters 可以在为所有的组件提供获取数据及数据状态的服务

main.js
```
import Vuex from 'vuex'
improt store from './vuex/store'

new Vue({
    el: '#app',
    store,
    render: h=>h(App)
})
```

App.vue
```
<template>
  <div id="app">
    <el-row type="flex" justify="center">
      <Count></Count>
    </el-row> 
  </div>
</template>

<script>
import Count from './components/Count.vue'

export default {
    name: 'app',
    components: {
      Count
    }
}
</script>
```

Count.vue
```
<template>
    <el-col>
        <p>Click: {{ $store.state.count }}</p>
        <p>Count is {{ evenOrOdd }}</p>
        <el-button type="primary" @click="increment">Increment</el-button>
        <el-button type="primary" @click="decrement">Decrement</el-button>
        <el-button type="primary" @click="incrementIfOdd">Odd</el-button>
        <el-button type="primary" @click="incrementIfAsync">Async</el-button>
    </el-col>
</template>
<script>
import {mapGetters, mapActions} from 'vuex'


export default {
    name: 'Count',
    computed: mapGetters([  
        'evenOrOdd'
    ]),
    methods: mapActions([
        'increment',
        'decrement',
        'incrementIfOdd',
        'incrementIfAsync'
    ])
}
</script>
```
* UI方面由element.ui 支持，也算是在尝试
* 关于‘$’，不同于jQuery，这个$是可以获取到挂载在vue实例上的对象
* mapGetters, mapActions, mapSate 为对应对象的辅助函数
    - 和原生的map 很像，表示一种映射:

```
computed: mapGetters([
    'evenOrOdd'
])
// the same as 
computed: {
    eventOrOdd () {
        return this.$store.getters.evenOrOdd
    }
}
```
接来下，制作一个todoMvc 文档案例
![img](../images/todo.gif)
分析：
* 需要复用的模块只有中间的 todo-lists，这是唯一的一个模块 
* 在整个事件流中，基本不存在异步事件，所以可以很愉快的使用mutations
* 分析整个todomvc的时间流，对vuex 进一步了解

store.vue
```
import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

const state = {                                         *
    todos: []
}
        
const mutations = {
    addTodo (state, {text}) {                           *    
        state.todos.push({
            text: text, 
            done: false                                         
        })
    },
    deleteTodo (state, {todo}) {
        state.todos.splice(state.todos.indexOf(todo), 1)  
    },
    toggleTodo (state, {todo}) {
        todo.done = !todo.done
    },
    editTodo (state, {todo, value}) {                  *
        todo.text = value
    },
    toggleAll (state, { done }) {
        if(state.todos.some( todo => todo.done === false)) {
            state.todos.forEach((todo=> todo.done = true))
        } else {
            state.todos.forEach((todo=> todo.done = false))
        }
    },
    clearCompleted (state) {
        state.todos = state.todos.filter(todo => !todo.done)
    }
}

export default new Vuex.Store({
    state,
    mutations   
})
```
* state 如上面的例子一样，数组对象
* 关于传值，JavaScript 接受的参数类型具有多元化
* ...[[Object,string],[Object,array],[Object,functiong],[Object, object],...]
* mutations 下的commitFn接受state为第一个参数，({object}) 这种参数为一个对象
* 例如：{text} -> {text:'输入内容', done: boolean } 代表输入内容和完成状态
* {todo, value} -> {todo: target.todoList, value} 当前更改的list对象，以及更改内容

App.vue
```
<template>
<div id="app">
  <section class="todoapp">
    <header class="header">
      <h1>todos</h1>
        <input type="checkbox" 
        id="toggle-all"
        v-show="todos.length"
        @change="toggleAll">
        <label for="toggle-all"></label>                 
      <input class="new-todo"
        autofocus
        autocomplete="off"
        placeholder="What needs to be done?" 
        @keyup.enter="addTodo">
    </header>
    
    <section class="main" v-show="todos.length">
      <ul class="todo-list">
        <todoList v-for="(todo,index) in filteredTodos" 
          :todo="todo" :key="index"></todoList>                   *
      </ul> 
    </section>
    
    <section class="footer">
      <span class="todo-count">
        <strong>{{ remaining }}</strong> 
        {{ remaining | pluralize('item') }} left
      </span>
      <ul class="filters">
        <li v-for="(val, key) in filters">
          <a href="#"
            :class="{selected: visibility === key}"
            @click="visibility = key">{{ key | capitalize }}</a>
        </li>
      </ul>
      <button class="clear-completed"
        v-show="todos.length > remaining"
        @click="clearCompleted">Clear completed</button>
    </section>
  </section>
</div>
</template>

<script>
import todoList from './components/todoList.vue'
import { mapMutations } from 'vuex'

const filters = {                                           * 
  all: todos => todos,
  active: todos => todos.filter(todo => !todo.done),
  completed: todos => todos.filter(todo => todo.done)
}

export default {
    name: 'app',
    components: {
      todoList
    },
    data () {
      return {
        visibility: 'all',                                 *
        filters: filters
      }
    },
    computed: {                                            *
      todos () {
        return this.$store.state.todos
      },
      filteredTodos () {
        return filters[this.visibility](this.todos)        *
      },
      remaining () {
        return this.todos.filter((todo) => !todo.done ).length
      }
    },
    methods: {
      addTodo (el) {
        let text = el.target.value     
        if(text.trim()) {                              
          this.$store.commit('addTodo', { text })   
        } 
          el.target.value = ''                  
      },
    ...mapMutations([                                     *
      'toggleAll',
      'clearCompleted'
    ])  
    },
    filters: {
      pluralize: (number, word) => number <= 1 ? word : (word + 's'),  
      capitalize: key => key.charAt(0).toUpperCase() + key.slice(1)   
    }
}
</script>
```
* 疑问：为什么数据交互不用actions ？ 
  - 代码，不难发现，改变的只有数据的状态，内部并没有回调函数。
* 为什么不用getters 来获取数据状态？
  - 这只是一个选择问题，当然可以用，但是在这里有更好的选择-> filter([vue过滤器](http://es6.ruanyifeng.com/#docs/array))在语义化与性能方面一样很出色
* filters对象是在对数据状态做一个预处理，映射给visibility
* computed {} 前面说过，vuex可以在为所有组件提供数据库，但是却需要组件自己去接收
* `return filters[visibility](todo)`  这看起来很复杂，细致分析一下
  - fiters对象的keys和 visibility的value 是一种映射关系
  - 意思：告诉`filters`以当前`visibility`的值来对数据状态做预处理
* ...mapMuations [ES6 数组解构](http://es6.ruanyifeng.com/#docs/array)
* `:key="index"` v-for默认使用`就地复用策略`，添加／删除组件时vue时如果做到组件顺序和状态不会混乱的？当然这是比较深层的问题了，为每个v-for产生的组件提供一个`唯一的key,以便它能跟踪每个节点的身份，从而重用和重新排序现有元素`，详情参见官方文档 [key](https://cn.vuejs.org/v2/guide/list.html#key)

todoList.vue
```
<template>
  <li class="todo" :class="{ completed: todo.done, editing: editing }">  
    <div class="view">
      <input type="checkbox" 
        class="toggle"
        :checked="todo.done"
        @change="toggleTodo({ todo: todo })">
      <label v-text="todo.text" 
        @dblclick="editing = true"></label>
      <button class="destroy"
        @click="deleteTodo({ todo: todo })"></button>  *
    </div>
    <input class="edit"
      v-show="editing"
      v-focus="editing"
      :value="todo.text"
      @keyup.enter="doneEdit"
      @keyup.esc="canceEdit"
      @blur="doneEdit">
  </li>
</template>

<script>
import { mapMutations } from 'vuex'  

  export default {
    name: 'todoList',
    props: ['todo'],
    data () {
      return {
        editing: false
      }
    },
    directives: {                                       *
      focus (el, { value }, { context }) {
        if(value) {
          context.$nextTick(()=>{
            el.focus()
          })
        }
      }
    },
    methods: {
      ...mapMutations([
        'editTodo',
        'toggleTodo',
        'deleteTodo'  
      ]),
      doneEdit (el) {
        let value = el.target.value.trim()               
        let { todo } = this 
        if(!value) {
          this.deleteTodo({todo})
        } else if (this.editing) {
          this.editTodo({todo, value})
          this.editing = false 
        }
      },
      canceEdit (el) {
        el.target.value = this.todo.text
        this.editing = false
      }
    }
  }
</script>
```
* 前言中，父子组件之间的因果就是[prop对象](https://cn.vuejs.org/v2/guide/components.html#Prop)，父组件将值传递给子组件就是依靠prop来传递
* `{(todo: todo)}` 又是一种头疼的传参方式，在这之前回到store.muataions看看这个参数所属的方案需要的形参是什么
  - `deleteTodo (state, {todo})` 这下就很明确了
  - 把当前子组件的数据状态显式传递{todo}这个对象
* [directives](https://cn.vuejs.org/v2/api/#Vue-directive) vue的自定义指令
* [$nextTick](https://cn.vuejs.org/v2/api/#Vue-nextTick)`在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM`

### 问题来袭：HTTP请求获取的数据怎么保存进state里？
![img](../images/vuexHttp.gif)

store.js
```
import Vue from 'vue'
import Vuex from 'vuex'
import axios from 'axios'

Vue.use(Vuex)

const state = {
  defCn: ''
}

const mutations = {
  getWord: function (state, data) {
    state.defCn = data[0].senses[0].defs
  }
}

const actions = {
  search ({commit}, text) {
    let word = text.target.value
    axios.get('http://damiao.io:5000/word/'+word)
      .then(function(res) {
        let data = res.data
        commit('getWord', data)
      })
  }
}

export default new Vuex.Store({
  state,
  mutations,
  actions,
})
```
* ajax 为异步请求，那必然是写在actives里执行
* 通过传参的方式，将response 传入 mutations, 对获取到的数据进行预处理，存放在state内

App.vue
```
<template>
  <div id="app">
    <el-row type="flex" justify="center">
      <el-col :span="15">
        <el-input icon="search" 
          placeholder="请输入单词"
          @keyup.enter.native="search"></el-input>
      </el-col>
    </el-row>
    
    <el-row type="flex" justify="center">
      <el-col :span="15">
        <el-collapse>
          <el-collapse-item v-for="(word, index) in defCn" 
          :title="word.defCn" 
          :key="index"> 
          <div v-for="(example, index) in word.examples" :key="index">
            <p>{{ example.en }}</p>
            <p>{{ example.cn }}</p>
          </div>           
          </el-collapse-item>
        </el-collapse>
      </el-col>
    </el-row>
  </div>
</template>

<script>
import { mapActions, mapState } from 'vuex'

export default {
  name:'App',
  computed: mapState([
      'defCn'
  ]),
  methods: mapActions([
    'search'
    ])
}
</script>
```
* v-on: handler.native  vue实现的冒泡